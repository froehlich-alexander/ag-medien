import {Toast} from "bootstrap";
import classNames from "classnames";
import React, {ChangeEventHandler, createRef} from "react";
import {Component} from "react";
import {ColorScheme, ColorSchemeData, ColorSchemeFragment} from "../color-base/colorpickerBackend";
import ColorPickerService from "../color-base/ColorPickerService";
import ColorSchemeDropdownMenu from "../ColorSchemeDropdownMenu";
import {ColorSchemeDuplicate} from "../Exceptions";
import {DefaultProps, Form} from "../utils";
import ExportDialog, {ColorSchemesFile} from "./Export";
import Coordinates = JQuery.Coordinates;

export class ColorSchemeFileInfo {
    public readonly colorScheme: ColorScheme;
    public readonly fileName: string;
    public readonly fileHash: number;

    constructor(colorScheme: ColorScheme, fileName: string, fileHash: number) {
        this.colorScheme = colorScheme;
        this.fileName = fileName;
        this.fileHash = fileHash;
    }
}

export function hashFileContent(filename: string, content: string): number {
    return hash(filename + content);
}

function hash(str: string, seed = 0): number {
    // source https://github.com/bryc/code/blob/master/jshash/experimental/cyrb53.js
    let h1 = 0xdeadbeef ^ seed, h2 = 0x41c6ce57 ^ seed;
    for (let i = 0, ch; i < str.length; i++) {
        ch = str.charCodeAt(i);
        h1 = Math.imul(h1 ^ ch, 2654435761);
        h2 = Math.imul(h2 ^ ch, 1597334677);
    }
    h1 = Math.imul(h1 ^ (h1 >>> 16), 2246822507) ^ Math.imul(h2 ^ (h2 >>> 13), 3266489909);
    h2 = Math.imul(h2 ^ (h2 >>> 16), 2246822507) ^ Math.imul(h1 ^ (h1 >>> 13), 3266489909);
    return 4294967296 * (2097151 & h2) + (h1 >>> 0);
}

interface ImportDialogProps extends DefaultProps {
    allColorSchemes: ColorScheme[],
    onColorSchemeImport: (colorSchemes: ColorSchemeFragment[]) => any,
    /** Used to create Color Schemes */
    service: ColorPickerService,
}

interface ImportDialogState {
    // CSs which can be selected by the user
    colorSchemesFromFile: ColorScheme[],
    invalidColorSchemesFromFile: ColorSchemeFileInfo[],
    // color schemes chosen by the user which will be imported
    selectedColorSchemes: Set<string>,
    hasBadFile: boolean,
    badFilesNames: string[],
}

class ImportDialog extends Component<ImportDialogProps, ImportDialogState> {
    modal = createRef<HTMLDivElement>();
    badFileToast = createRef<HTMLDivElement>();
    invalidColorSchemesToast = createRef<HTMLDivElement>();

    constructor(props: ImportDialogProps) {
        super(props);
        this.state = {
            colorSchemesFromFile: [],
            invalidColorSchemesFromFile: [],
            selectedColorSchemes: new Set(),
            hasBadFile: false,
            badFilesNames: [],
        };
    }

    public render(): React.ReactNode {
        return (
            <div className={classNames("modal fade", this.props.className)}
                 tabIndex={-1}
                 ref={this.modal}
                 aria-label="Dialog to import color schemes"
                 aria-hidden={true}
                 id="color-scheme-import-dialog">
                <div className="modal-dialog modal-dialog-centered">
                    <div className={"modal-content"}>
                        <div className={"modal-header"}>
                            <h5 className={"modal-title"}>Import Color schemes</h5>
                            <button type="button" className="btn-close" data-bs-dismiss="modal"
                                    aria-label="Close"></button>
                        </div>
                        <div className={"modal-body"}>
                            <Form action="javascript:void(0)"
                                  onSubmit={this.importColorSchemes}
                                  id="import-dialog-form"
                                  className="row g-4">
                                <div className={"input-group"}>
                                    <label htmlFor="import-dialog-file-input"
                                           className="input-group-text">
                                        Color Schemes File
                                    </label>
                                    <input type="file"
                                           id="import-dialog-file-input"
                                           className="form-control"
                                           required
                                           accept={".color-schemes"}
                                           onChange={this.handleFileInputChange}
                                           multiple
                                    />
                                    <span className="form-text">The files should be generated by this Color Picker and end with <strong>.color-schemes</strong></span>
                                    <div className="invalid-feedback">You need to select at least one file</div>
                                    <div className="toast-container">
                                        <div className="position-fixed end-0 bottom-0 p-3">
                                            <div className="toast"
                                                 role="alert"
                                                 ref={this.badFileToast}>
                                                <div className={"toast-header"}>
                                                    <strong className="text-danger me-auto">File Error</strong>
                                                    <small>now</small>
                                                    <button type="button"
                                                            className="btn-close"
                                                            aria-label="Close"
                                                            data-bs-dismiss="toast"/>
                                                </div>
                                                <div className="toast-body">
                                                    <p>The following files do not contain valid data, so they were
                                                        removed
                                                        from
                                                        the selection:</p>
                                                    <ul>
                                                        {this.state.badFilesNames.map(v => <li key={v}>{v}</li>)}
                                                    </ul>
                                                </div>
                                            </div>
                                        </div>

                                        <div className="position-fixed end-0 bottom-0 p-3">
                                            <div className="toast"
                                                 role="alert"
                                                 ref={this.invalidColorSchemesToast}>
                                                <div className={"toast-header"}>
                                                    <strong className="text-warning me-auto">Color Schemes
                                                        skipped</strong>
                                                    <small>now</small>
                                                    <button type="button"
                                                            className="btn-close"
                                                            aria-label="Close"
                                                            data-bs-dismiss="toast"/>
                                                </div>
                                                <div className="toast-body">
                                                    <p>{this.state.invalidColorSchemesFromFile.length} Color Schemes
                                                        were skipped because an equal Color Scheme already exists. Maybe
                                                        you have re-imported a file?</p>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <ColorSchemeDropdownMenu
                                    className="col-12"
                                    hasHeaders={false}
                                    colorSchemes={this.state.colorSchemesFromFile}
                                    multiple
                                    newButton={false}
                                    formText="Select the Color Schemes to import"
                                    disablePlaceholderIfNoCustomCS={true}
                                    selectedColorSchemes={this.state.selectedColorSchemes}
                                    oneItemRequired={true}
                                    onColorSchemeSelected={this.handleColorSchemeSelected}/>
                                {/*<div className={"input-group col-12"}>*/}
                                {/*    <label className={"input-group-text"} htmlFor={"mimetype-select"}>*/}
                                {/*        Export as*/}
                                {/*    </label>*/}
                                {/*    <select name={"mimetype"}*/}
                                {/*            id={"mimetype-select"}*/}
                                {/*            className={"form-select"}*/}
                                {/*            value={this.state.mimeType}*/}
                                {/*            required*/}
                                {/*            onChange={this.handleMimeTypeChange}>*/}
                                {/*        <option value={"application/json"}>JSON</option>*/}
                                {/*        <option value={"application/xml"}>XML</option>*/}
                                {/*    </select>*/}
                                {/*    <span className={"form-text col-12"}>The filetype to export the color schemes</span>*/}
                                {/*</div>*/}
                            </Form>
                        </div>
                        <div className="modal-footer">
                            <button type="button"
                                    className="btn btn-secondary"
                                    data-bs-dismiss="modal">
                                Cancel
                            </button>
                            <button type="submit"
                                    form="import-dialog-form"
                                    className="btn btn-primary">
                                Import
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        );
    }

    private handleColorSchemeSelected = (selectedColorSchemes: Set<string>) => {
        this.setState({
            selectedColorSchemes: selectedColorSchemes,
        });
    };

    private handleFileInputChange: ChangeEventHandler<HTMLInputElement> = (event) => {
        // this is used to create a mutable FileList which is then assigned to the file input
        const dataTransfer = new DataTransfer();
        // reset bad files
        this.setState({
            hasBadFile: false,
            badFilesNames: [],
        });
        Promise.all(Array.from(event.target.files!).map(file => file.text()
            .then(text => new Promise<ColorSchemesFile>((resolve, reject) => {
                try {
                    resolve(JSON.parse(text));
                } catch (e) {
                    reject(e);
                }
            })
                .then(v => v.colorSchemes.map(v => ColorScheme.fromJSON(v)))
                .then(value => {
                    // this.setState(state => ({colorSchemesFromFile: state.colorSchemesFromFile.concat(value)}));
                    dataTransfer.items.add(file);
                    let fileHash = hashFileContent(file.name, text);
                    return value.map(cs => new ColorSchemeFileInfo(cs, file.name, fileHash));
                })
                .catch((e) => {
                    console.log("error caught");
                    if (e instanceof SyntaxError) {
                        this.setState(state => ({
                            badFilesNames: state.badFilesNames.concat(file.name),
                            hasBadFile: true,
                        }));
                    } else {
                        throw e;
                    }
                }))))
            .then(colorSchemes => ([] as ColorSchemeFileInfo[]).concat(...colorSchemes.filter((v): v is ColorSchemeFileInfo[] => v !== null)))
            // filter CSs
            .then(colorSchemes => Promise.allSettled(
                colorSchemes.map(cs => new Promise<ColorSchemeFileInfo>((resolve, reject) => {
                    // if same CS already here
                    if (this.props.allColorSchemes.find(cs.colorScheme.equalsFragment)) {
                        reject(new ColorSchemeDuplicate(cs));
                    }
                    resolve(cs);
                }))))
            // aggregate valid and invalid CSs
            .then(values => ({
                valid: values.filter((v): v is PromiseFulfilledResult<Awaited<Promise<ColorSchemeFileInfo>>> => v.status === "fulfilled").map(v => v.value),
                invalid: values.filter((v): v is PromiseRejectedResult => v.status === "rejected").map(v => (v.reason as ColorSchemeDuplicate).colorScheme),
            }))
            .then(colorSchemes => {
                // console.log("bad files:", badFiles.map(v => v.name));
                this.setState(state => ({
                    colorSchemesFromFile: state.colorSchemesFromFile.concat(colorSchemes.valid.map(v => v.colorScheme)),
                    invalidColorSchemesFromFile: colorSchemes.invalid,
                }));
                event.target.files = dataTransfer.files;
                // this.setState({
                //     badFilesNames: badFiles.map(v => v.name),
                //     hasBadFile: badFiles.length > 0,
                // });
            });
    };

    public componentDidMount(): void {
        new Toast(this.badFileToast.current!);
    }

    public componentDidUpdate(prevProps: Readonly<ImportDialogProps>, prevState: Readonly<ImportDialogState>, snapshot?: any): void {
        if (this.state.hasBadFile && (this.state.hasBadFile !== prevState.hasBadFile || (this.state.badFilesNames.length !== prevState.badFilesNames.length ||
            !this.state.badFilesNames.map(v => prevState.badFilesNames.includes(v)).reduce((prev, now) => prev && now, true)))) {
            console.log("update toast");
            Toast.getInstance(this.badFileToast.current!)!.show();
        }

        let invalidCSs = this.state.invalidColorSchemesFromFile;
        const preInvalidCSs = prevState.invalidColorSchemesFromFile;
        if (invalidCSs.length > 0 && (invalidCSs.length != preInvalidCSs.length || invalidCSs.map(v => preInvalidCSs.includes(v)).reduce((prev, now) => prev && now, true))) {
            Toast.getInstance(this.invalidColorSchemesToast.current!)!.show();
        }
    }

    private importColorSchemes = () => {
        const colorSchemes = this.state.colorSchemesFromFile.slice();
        // remove equal CSs
        for (let csFragment of colorSchemes) {
            if (this.props.allColorSchemes.find(csFragment.equals)) {
                colorSchemes.splice(colorSchemes.indexOf(csFragment), 1);
            }
        }
        this.props.onColorSchemeImport(this.state.colorSchemesFromFile.filter(v => this.state.selectedColorSchemes.has(v.id))
            .map(ColorScheme.prototype.toFragment));
        this.setState(state => ({
            // remove all color schemes passed to the parent
            colorSchemesFromFile: state.colorSchemesFromFile.filter(v => !this.state.colorSchemesFromFile.includes(v)),
        }));
    };
}

export default ImportDialog;