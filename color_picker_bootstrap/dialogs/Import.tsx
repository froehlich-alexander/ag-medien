import {Toast} from "bootstrap";
import classNames from "classnames";
import React, {ChangeEventHandler, createRef} from "react";
import {Component} from "react";
import {ColorScheme, ColorSchemeData, ColorSchemeFragment} from "../color-base/colorpickerBackend";
import ColorPickerService from "../color-base/ColorPickerService";
import ColorSchemeDropdownMenu from "../ColorSchemeDropdownMenu";
import {DefaultProps, Form} from "../utils";
import {ColorSchemesFile} from "./Export";

interface ImportDialogProps extends DefaultProps {
    allColorSchemes: ColorScheme[],
    onColorSchemeImport: (colorSchemes: ColorSchemeFragment[]) => any,
    /** Used to create Color Schemes */
    service: ColorPickerService,
}

interface ImportDialogState {
    colorSchemesToImport: ColorSchemeFragment[],
    hasBadFile: boolean,
    badFilesNames: string[],
}

class ImportDialog extends Component<ImportDialogProps, ImportDialogState> {
    modal = createRef<HTMLDivElement>();
    badFileToast = createRef<HTMLDivElement>();

    constructor(props: ImportDialogProps) {
        super(props);
        this.state = {
            colorSchemesToImport: [],
            hasBadFile: false,
            badFilesNames: [],
        };
    }

    public render(): React.ReactNode {
        return (
            <div className={classNames("modal fade", this.props.className)}
                 tabIndex={-1}
                 ref={this.modal}
                 aria-label="Dialog to import color schemes"
                 aria-hidden={true}
                 id="color-scheme-import-dialog">
                <div className="modal-dialog modal-dialog-centered">
                    <div className={"modal-content"}>
                        <div className={"modal-header"}>
                            <h5 className={"modal-title"}>Import Color schemes</h5>
                            <button type="button" className="btn-close" data-bs-dismiss="modal"
                                    aria-label="Close"></button>
                        </div>
                        <div className={"modal-body"}>
                            <Form action="javascript:void(0)"
                                  onSubmit={this.importColorSchemes}
                                  id="import-dialog-form"
                                  className="row g-4">
                                <div className={"input-group"}>
                                    <label htmlFor="import-dialog-file-input"
                                           className="input-group-text">
                                        Color Schemes File
                                    </label>
                                    <input type="file"
                                           id="import-dialog-file-input"
                                           className="form-control"
                                           required
                                           accept={".color-schemes"}
                                           onChange={this.handleFileInputChange}
                                           multiple
                                    />
                                    <span className="form-text">The files should be generated by this Color Picker and end with ".color-schemes"</span>
                                    <div className="invalid-feedback">You need to select at least one file</div>
                                    <div className="position-fixed end-0 bottom-0 p-3">
                                        <div className="toast"
                                             role="alert"
                                             ref={this.badFileToast}>
                                            <div className={"toast-header"}>
                                                <strong className="text-danger me-auto">File Error</strong>
                                                <small>now</small>
                                                <button type="button"
                                                        className="btn-close"
                                                        aria-label="Close"
                                                        data-bs-dismiss="toast"/>
                                            </div>
                                            <div className="toast-body">
                                                <p>The following files do not contain valid data, so they were removed
                                                    from
                                                    the selection:</p>
                                                <ul>
                                                    {this.state.badFilesNames.map(v => <li key={v}>{v}</li>)}
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                {/*<ColorSchemeDropdownMenu*/}
                                {/*    className="col-12"*/}
                                {/*    colorSchemes={this.props.allColorSchemes}*/}
                                {/*    multiple*/}
                                {/*    newButton={false}*/}
                                {/*    formText={"Select the Color Schemes to export"}*/}
                                {/*    disablePlaceholderIfNoCustomCS={true}*/}
                                {/*    selectedColorSchemes={this.state.selectedColorSchemes}*/}
                                {/*    oneItemRequired={true}*/}
                                {/*    onColorSchemeSelected={this.handleColorSchemeSelected}/>*/}
                                {/*<div className={"input-group col-12"}>*/}
                                {/*    <label className={"input-group-text"} htmlFor={"mimetype-select"}>*/}
                                {/*        Export as*/}
                                {/*    </label>*/}
                                {/*    <select name={"mimetype"}*/}
                                {/*            id={"mimetype-select"}*/}
                                {/*            className={"form-select"}*/}
                                {/*            value={this.state.mimeType}*/}
                                {/*            required*/}
                                {/*            onChange={this.handleMimeTypeChange}>*/}
                                {/*        <option value={"application/json"}>JSON</option>*/}
                                {/*        <option value={"application/xml"}>XML</option>*/}
                                {/*    </select>*/}
                                {/*    <span className={"form-text col-12"}>The filetype to export the color schemes</span>*/}
                                {/*</div>*/}
                            </Form>
                        </div>
                        <div className="modal-footer">
                            <button type="button"
                                    className="btn btn-secondary"
                                    data-bs-dismiss="modal">
                                Cancel
                            </button>
                            <button type="submit"
                                    form="import-dialog-form"
                                    className="btn btn-primary">
                                Import
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        );
    }

    private handleFileInputChange: ChangeEventHandler<HTMLInputElement> = (event) => {
        // this is used to create a mutable FileList which is then assigned to the file input
        const dataTransfer = new DataTransfer();
        // reset bad files
        this.setState({
            hasBadFile: false,
            badFilesNames: [],
        });
        Promise.all(Array.from(event.target.files!).map(file => file.text()
            .then<ColorSchemesFile>(value => JSON.parse(value))
            .then(v => v.colorSchemes.map(v => ColorSchemeFragment.fromJSON(v)))
            .then(value => {
                this.setState(state => ({colorSchemesToImport: state.colorSchemesToImport.concat(value)}));
                dataTransfer.items.add(file);
            })
            .catch((e) => {
                console.log("error caught");
                if (e instanceof SyntaxError) {
                    this.setState(state => ({
                        badFilesNames: state.badFilesNames.concat(file.name),
                        hasBadFile: true,
                    }));
                } else {
                    throw e;
                }
            })))
            // .then(files => files.filter((v): v is File => v instanceof File))
            .then((badFiles) => {
                // console.log("bad files:", badFiles.map(v => v.name));
                event.target.files = dataTransfer.files;
                // this.setState({
                //     badFilesNames: badFiles.map(v => v.name),
                //     hasBadFile: badFiles.length > 0,
                // });
            });
    };

    public componentDidMount(): void {
        new Toast(this.badFileToast.current!);
    }

    public componentDidUpdate(prevProps: Readonly<ImportDialogProps>, prevState: Readonly<ImportDialogState>, snapshot?: any): void {
        if (this.state.hasBadFile !== prevState.hasBadFile || (this.state.badFilesNames.length !== prevState.badFilesNames.length ||
            !this.state.badFilesNames.map(v => v in prevState.badFilesNames).reduce((prev, now) => prev && now, true))) {
            const toast = Toast.getInstance(this.badFileToast.current!)!;
            console.log("update toast");
            if (this.state.hasBadFile) {
                toast.show();
            }
        }
    }

    private importColorSchemes = () => {
        const colorSchemes = this.state.colorSchemesToImport.slice();
        // remove equal CSs
        for (let csFragment of colorSchemes) {
            if (this.props.allColorSchemes.find(csFragment.equals)) {
                colorSchemes.splice(colorSchemes.indexOf(csFragment), 1);
            }
        }
        this.props.onColorSchemeImport(colorSchemes);
        this.setState(state => ({
            // remove all color schemes passed to the parent
            colorSchemesToImport: state.colorSchemesToImport.filter(v => !this.state.colorSchemesToImport.includes(v)),
        }));
    };
}

export default ImportDialog;